<?php

/**
 * @file
 * Contains image_widget_crop.module.
 */

use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Render\Element;
use Drupal\file\Plugin\Field\FieldType\FileFieldItemList;

/**
 * Implements hook_help().
 */
function image_widget_crop_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    case 'help.page.image_widget_crop':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Implement CROP API into the fields image');
      $output .= '<h3>' . t('Try module') . '</h3>';
      $output .= '<p>' . t('You can Test ImageWidgetCrop in action directly with the sub-module, "ImageWidgetCrop example" to test differents usecase of this module');
      $output .= '</dl>';
      return $output;
  }
}

/**
 * Implements hook_field_widget_info_alter().
 */
function image_widget_cropfield_widget_info_alter(array &$info) {
  // Let a new field type re-use an existing widget.
  $info['image_image']['field_types'][] = 'image_widget_crop';
}

/**
 * Implements hook_entity_presave().
 */
function image_widget_crop_entity_presave(Drupal\Core\Entity\EntityInterface $entity) {
  if (isset($entity) && method_exists($entity, 'getFields')) {
    // Loop all fields of the saved entity.
    foreach ($entity->getFields() as $entity_fields) {
      // If current field is FileField and use imageWidgetCrop.
      if ($entity_fields instanceof FileFieldItemList && isset($entity_fields->crop_preview_wrapper)) {

        /** @var \Drupal\image_widget_crop\ImageWidgetCropManager $image_widget_crop_manager */
        $image_widget_crop_manager = \Drupal::service('image_widget_crop.manager');

        /* First loop to get each elements independently in the field values.
        Required if the image field cardinality > 1. */
        foreach ($entity_fields->getValue() as $crop_element) {
          /* Parse all value of a crop_preview_wrapper element and get,
          properties associate with her CropType. */
          foreach ($crop_element['crop_preview_wrapper'] as $crop_type_name => $properties) {
            /** @var \Drupal\crop\Entity\CropType $crop_type */
            $crop_type = \Drupal::entityManager()
              ->getStorage('crop_type')
              ->loadByProperties(['id' => $crop_type_name]);

            $properties['values'] = &$properties['crop_container']['values'];

            // If the crop type needed is disabled or delete.
            if (!isset($crop_type[$crop_type_name]) || empty($crop_type[$crop_type_name])) {
              drupal_set_message(t("The CropType ('@cropType') is not active or not defined. Please verify configuration of image style or ImageWidgetCrop formatter configuration", ['@cropType' => $crop_type_name]), 'error');
              return;
            }

            // If this crop is availables to create an crop entity.
            if ($entity->isNew()) {
              if ($properties['values']['crop_applied'] == '1' && isset($properties['values']) && (!empty($properties['values']['width']) && !empty($properties['values']['height']))) {
                // Get crop type for current cropType.
                if (!isset($crop_type) && empty($crop_type)) {
                  drupal_set_message(t("The type of crop does not exist, please check the configuration of the CropType ('@cropType')", ['@cropType' => $crop_type->label()]), 'error');
                  return;
                }

                $image_widget_crop_manager->applyCrop($properties['values'], $crop_element, $crop_type[$crop_type_name]);
              }
            }
            else {
              // Get all imagesStyle used this crop_type.
              $image_styles = $image_widget_crop_manager->getImageStylesByCrop($crop_type_name);
              $crops = $image_widget_crop_manager->loadImageStyleByCrop($image_styles, $crop_type[$crop_type_name], $crop_element['file-uri']);
              // If the entity already exist & is not deleted by,
              // user update $crop_type_name crop entity.
              // If you need to delete existing crop when you edit this entity.
              if ($properties['values']['crop_applied'] == '0' && !empty($crops)) {
                $image_widget_crop_manager->deleteCrop($crop_element['file-uri'], $crop_type[$crop_type_name], $crop_element['file-id']);
              }
              elseif (isset($properties['values']) && (!empty($properties['values']['width']) && !empty($properties['values']['height']))) {
                $image_widget_crop_manager->updateCrop($properties['values'], $crop_element, $crop_type[$crop_type_name]);
              }
            }
          }
        }
      }
    }
  }
}

/**
 * Implements hook_libraries_info().
 */
function image_widget_crop_libraries_info() {
  $libraries = array(
    'cropper' => array(
      'name' => 'cropper',
      'vendor url' => 'https://github.com/fengyuanchen/cropper',
      'download url' => 'https://cdnjs.com/libraries/cropper',
      'version arguments' => array(
        'file' => 'cropper.min.js',
        'pattern' => '/Cropper v(.*)/',
        'lines' => 2,
      ),
      'files' => array(
        'js' => array(
          'cropper.min.js' => array(),
        ),
        'css' => array(
          'cropper.min.css' => array(),
        ),
      ),
    ),
  );
  return $libraries;
}

/**
 * Implements hook_library_info_alter().
 */
function image_widget_crop_library_info_alter(&$libraries, $extension) {
  if ($extension != 'image_widget_crop') {
    return;
  }

  $config = \Drupal::config('image_widget_crop.settings');
  if (!\Drupal::moduleHandler()->moduleExists('libraries') && !$config->get('settings.library_url') && !$config->get('settings.css_url')
  ) {
    $libraries['cropper.integration']['js'] = [];
  }

  // Get the correct path of the Cropper js file (the user needs to manually
  // put the jquery.cropper.min.js in libraries/cropper folder or set the url
  // in the settings).
  if ($library_url = $config->get('settings.library_url')) {
    // Cloud hosted library, use external JavaScript.
    $libraries['cropper']['js'][$library_url] = [
      'type' => 'external',
      'minified' => TRUE,
    ];
  }
  elseif (\Drupal::moduleHandler()->moduleExists('libraries')) {
    $info = libraries_detect('cropper');
    $libraries['cropper'] += [
      'version' => $info['installed'] ? $info['version'] : 'web-hosted',
    ];
    if ($info['installed']) {
      // Because the library is self hosted, use files from library definition.
      if (!empty($info['files']['js'])) {
        foreach ($info['files']['js'] as $data => $option) {

          if (is_numeric($data)) {
            $option = "/{$info['library path']}/{$option}";
          }
          elseif (empty($option['type']) || $option['type'] == 'file') {
            $data = "/{$info['library path']}/{$data}";
          }

          $libraries['cropper']['js'][$data] = $option;
        }
      }
    }
  }

  // Add the local CSS to the libraries.
  if ($css_url = $config->get('settings.css_url')) {
    // Cloud hosted library, use external CSS.
    $libraries['cropper']['css']['component'][$css_url] = [
      'type' => 'external',
      'minified' => TRUE,
    ];
  }
  elseif (\Drupal::moduleHandler()->moduleExists('libraries')) {
    $info = libraries_detect('cropper');
    $libraries['cropper'] += [
      'version' => $info['installed'] ? $info['version'] : 'web-hosted',
    ];
    if ($info['installed']) {
      // Because the library is self hosted, use files from library definition.
      if (!empty($info['files']['css'])) {
        foreach ($info['files']['css'] as $data => $option) {

          if (is_numeric($data)) {
            $option = "/{$info['library path']}/{$option}";
          }
          elseif (empty($option['type']) || $option['type'] == 'file') {
            $data = "/{$info['library path']}/{$data}";
          }

          $libraries['cropper']['css']['theme'][$data] = $option;
        }
      }
    }
  }
}
